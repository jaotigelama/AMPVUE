import { AsyncFileMapper } from './mapper';
export declare type ClientManifest = {
    publicPath: string;
    all: Array<string>;
    initial: Array<string>;
    async: Array<string>;
    modules: {
        [id: string]: Array<number>;
    };
    hasNoCssVersion?: {
        [file: string]: boolean;
    };
};
export declare type Resource = {
    file: string;
    extension: string;
    fileWithoutQuery: string;
    asType: string;
};
export declare type SSRContext = {
    getPreloadFiles?: Function;
    renderResourceHints?: Function;
    renderState?: Function;
    renderScripts?: Function;
    renderStyles?: Function;
    nonce?: string;
    head?: string;
    styles?: string;
    _mappedFiles?: Array<Resource>;
    _registeredComponents?: Array<any>;
};
export declare type RenderContext = {
    preloadFiles?: Array<any>;
    prefetchFiles?: Array<any>;
    shouldPrefetch?: (file: string, type: string) => boolean;
    shouldPreload?: (file: string, type: string) => boolean;
    publicPath?: string;
    clientManifest?: ClientManifest;
    mapFiles?: AsyncFileMapper;
};
export declare type RenderOptions = {
    clientManifest?: ClientManifest;
    publicPath?: string;
};
export declare function createRenderContext({ clientManifest, publicPath }: RenderOptions): RenderContext;
export declare function renderStyles(ssrContext: SSRContext, renderContext: RenderContext): string;
export declare function renderResourceHints(ssrContext: SSRContext, renderContext: RenderContext): string;
export declare function renderPreloadLinks(ssrContext: SSRContext, renderContext: RenderContext): string;
export declare function renderPrefetchLinks(ssrContext: SSRContext, renderContext: RenderContext): string;
export declare function renderScripts(ssrContext: SSRContext, renderContext: RenderContext): string;
export declare function getPreloadFiles(ssrContext: SSRContext, renderContext: RenderContext): Array<Resource>;
export declare function getUsedAsyncFiles(ssrContext: SSRContext, renderContext: RenderContext): Array<Resource>;
